name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Еженедельный запуск в воскресенье

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pylint pytest
        
    - name: SAST - Bandit (Static Application Security Testing)
      run: |
        echo "Running Bandit SAST scan..."
        bandit -r . -f html -o reports/bandit-report.html
        bandit -r . -f json -o reports/bandit-report.json
        echo "Bandit scan completed"
      continue-on-error: true
      
    - name: SAST - Safety (Vulnerability Scanner)
      run: |
        echo "Running Safety dependency scan..."
        safety check --json --output reports/safety-report.json
        safety check --full-report
        echo "Safety scan completed"
      continue-on-error: true
        
    - name: SCA - pip audit (Python Dependency Check)
      run: |
        echo "Running pip audit for dependency vulnerabilities..."
        pip install pip-audit
        pip-audit --format json --output reports/pip-audit-report.json || true
        pip-audit -v || true
      continue-on-error: true
      
    - name: Code Quality - Pylint
      run: |
        echo "Running Pylint code analysis..."
        mkdir -p reports
        pylint app.py config.py security.py utils.py --output-format=json:reports/pylint-report.json || true
        echo "Pylint analysis completed"
      continue-on-error: true
      
    - name: Run Security Tests
      run: |
        echo "Running security tests..."
        python -m pytest tests/ -v --junitxml=reports/test-results.xml || true
        echo "Security tests completed"
      continue-on-error: true
      
    - name: Generate Security Report
      run: |
        echo "Generating security summary..."
        python scripts/generate_security_report.py
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
        retention-days: 30

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t flask-auth-api:latest .
        
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-auth-api:latest'
        format: 'sarif'
        output: 'reports/trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'reports/trivy-results.sarif'

  dependency-scan:
    name: Advanced Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download and Run OWASP Dependency Check
      run: |
        echo "Running OWASP Dependency Check..."
        wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v8.3.1/dependency-check-8.3.1-release.zip
        unzip -q dependency-check-8.3.1-release.zip
        ./dependency-check/bin/dependency-check.sh \
          --project "flask-auth-api" \
          --scan "." \
          --out "reports" \
          --format "HTML" \
          --format "JSON" \
          --enableRetired
        echo "Dependency Check completed"
      continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security, dependency-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
      
    - name: Display Security Status
      run: |
        echo "All security scans completed successfully!"
        echo "Check artifacts for detailed reports."
