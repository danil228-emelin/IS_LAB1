name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pylint pytest pip-audit
        
    - name: SAST - Bandit (Static Application Security Testing)
      run: |
        echo "üîç Running Bandit SAST scan..."
        bandit -r . -f html -o reports/bandit-report.html || echo "Bandit completed with warnings"
        bandit -r . -f json -o reports/bandit-report.json || echo "Bandit JSON completed with warnings"
        echo "‚úÖ Bandit scan completed"
      continue-on-error: true
      
    - name: SAST - Safety (Vulnerability Scanner)
      run: |
        echo "üîç Running Safety dependency scan..."
        safety check --json --output reports/safety-report.json || echo "Safety completed with warnings"
        safety check --full-report || echo "Safety report generated with warnings"
        echo "‚úÖ Safety scan completed"
      continue-on-error: true
        
    - name: SCA - pip audit (Python Dependency Check)
      run: |
        echo "üîç Running pip audit for dependency vulnerabilities..."
        pip-audit --format json --output reports/pip-audit-report.json || echo "pip-audit completed with warnings"
        pip-audit -v || echo "pip-audit verbose completed"
        echo "‚úÖ pip audit completed"
      continue-on-error: true
      
    - name: Code Quality - Pylint
      run: |
        echo "üîç Running Pylint code analysis..."
        pylint app.py config.py security.py utils.py --output-format=json:reports/pylint-report.json || echo "Pylint completed with warnings"
        echo "‚úÖ Pylint analysis completed"
      continue-on-error: true
      
    - name: Run Security Tests
      run: |
        echo "üß™ Running security tests..."
        python -m pytest tests/ -v --junitxml=reports/test-results.xml || echo "Tests completed with some failures"
        echo "‚úÖ Security tests completed"
      continue-on-error: true
      
    - name: Generate Security Report
      run: |
        echo "üìä Generating security summary..."
        python scripts/generate_security_report.py
        echo "‚úÖ Security summary generated"
      continue-on-error: true

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Build Docker image
      run: |
        echo "üê≥ Building Docker image..."
        docker build -t flask-auth-api:latest .
        echo "‚úÖ Docker image built"
      
    - name: Scan Docker image with Trivy
      run: |
        echo "üîç Scanning Docker image with Trivy..."
        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        # Run scan and ensure directory exists
        mkdir -p reports
        trivy image --format sarif --output reports/trivy-results.sarif flask-auth-api:latest || echo "Trivy scan completed with findings"
        echo "‚úÖ Trivy scan completed"
      continue-on-error: true
        
    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'reports/trivy-results.sarif'

  dependency-scan:
    name: Advanced Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Download and Run OWASP Dependency Check
      run: |
        echo "üîç Running OWASP Dependency Check..."
        # Download and install OWASP Dependency Check
        wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
        unzip -q dependency-check-9.0.9-release.zip
        # Ensure reports directory exists
        mkdir -p reports
        # Run scan
        ./dependency-check/bin/dependency-check.sh \
          --project "flask-auth-api" \
          --scan "." \
          --out "reports" \
          --format "HTML" \
          --format "JSON" \
          --enableRetired || echo "Dependency Check completed with findings"
        echo "‚úÖ OWASP Dependency Check completed"
      continue-on-error: true

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security, dependency-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
      
    - name: Display Security Status
      run: |
        echo "üîí SECURITY SCAN SUMMARY"
        echo "========================"
        echo "‚úÖ Bandit SAST: Completed"
        echo "‚úÖ Safety Check: Completed" 
        echo "‚úÖ Docker Trivy Scan: Completed"
        echo "‚úÖ OWASP Dependency Check: Completed"
        echo "‚úÖ Security Tests: Completed"
        echo ""
        echo "üìÅ Available Reports:"
        find all-artifacts -name "*.html" -o -name "*.json" -o -name "*.xml" -o -name "*.sarif" | head -10
        echo ""
        echo "üéØ All security scans completed!"
        echo "Some scans may have findings - check artifacts for details."
        
    - name: Upload combined reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-combined
        path: all-artifacts
        retention-days: 30

  upload-reports:
    name: Upload Individual Reports
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security, dependency-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-sast-reports
        path: |
          reports/bandit-report.*
          reports/safety-report.*
          reports/pip-audit-report.*
          reports/pylint-report.*
          reports/test-results.xml
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Upload Docker Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-docker-reports
        path: |
          reports/trivy-results.*
        retention-days: 30
        if-no-files-found: ignore
        
    - name: Upload Dependency Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-dependency-reports
        path: |
          reports/dependency-check-report.*
        retention-days: 30
        if-no-files-found: ignore
