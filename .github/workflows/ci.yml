name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Еженедельный запуск в воскресенье

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pylint pytest pip-audit
        echo "✅ Dependencies installed"
        
    - name: SAST - Bandit (Static Application Security Testing)
      run: |
        echo "🔍 Running Bandit SAST scan..."
        bandit -r . -f html -o reports/bandit-report.html
        bandit -r . -f json -o reports/bandit-report.json
        bandit -r . -f txt -o reports/bandit-report.txt
        echo "✅ Bandit scan completed"
      continue-on-error: true
      
    - name: SAST - Safety (Vulnerability Scanner)
      run: |
        echo "🔍 Running Safety dependency scan..."
        safety check --json --output reports/safety-report.json
        safety check --full-report > reports/safety-report.txt
        echo "✅ Safety scan completed"
      continue-on-error: true
        
    - name: SCA - pip audit (Python Dependency Check)
      run: |
        echo "🔍 Running pip audit for dependency vulnerabilities..."
        pip-audit --format json --output reports/pip-audit-report.json
        pip-audit --format table > reports/pip-audit-report.txt
        echo "✅ pip audit completed"
      continue-on-error: true
      
    - name: Code Quality - Pylint
      run: |
        echo "🔍 Running Pylint code analysis..."
        pylint app.py config.py security.py utils.py --output-format=json:reports/pylint-report.json
        pylint app.py config.py security.py utils.py --output-format=text:reports/pylint-report.txt
        echo "✅ Pylint analysis completed"
      continue-on-error: true
      
    - name: Run Security Tests
      run: |
        echo "🧪 Running security tests..."
        python -m pytest tests/ -v --junitxml=reports/test-results.xml --html=reports/test-report.html --self-contained-html
        echo "✅ Security tests completed"
      continue-on-error: true
      
    - name: Generate Security Summary Report
      run: |
        echo "📊 Generating security summary..."
        python scripts/generate_security_report.py
        echo "✅ Security summary generated"
      continue-on-error: true
      
    - name: Create Build Summary
      run: |
        echo "📋 Creating build summary..."
        python scripts/create_build_summary.py
        echo "✅ Build summary created"
      continue-on-error: true
      
    - name: Upload SAST Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sast-security-reports
        path: |
          reports/bandit-report.*
          reports/safety-report.*
          reports/pip-audit-report.*
          reports/pylint-report.*
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Test Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: |
          reports/test-*
          reports/*.xml
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Summary Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: summary-reports
        path: |
          reports/security-summary.*
          reports/build-summary.*
        retention-days: 30
        if-no-files-found: warn

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports/docker
      
    - name: Build Docker image
      run: |
        echo "🐳 Building Docker image..."
        docker build -t flask-auth-api:latest .
        echo "✅ Docker image built"
      
    - name: Install Trivy
      run: |
        echo "📦 Installing Trivy..."
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy
        echo "✅ Trivy installed"
      
    - name: Scan Docker image with Trivy
      run: |
        echo "🔍 Scanning Docker image with Trivy..."
        trivy image --format sarif --output reports/docker/trivy-results.sarif flask-auth-api:latest
        trivy image --format json --output reports/docker/trivy-results.json flask-auth-api:latest
        trivy image --format table > reports/docker/trivy-results.txt flask-auth-api:latest
        echo "✅ Trivy scan completed"
      continue-on-error: true
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'reports/docker/trivy-results.sarif'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker Security Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-reports
        path: reports/docker/
        retention-days: 30
        if-no-files-found: warn

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Skip in PRs from forks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create reports directory
      run: mkdir -p reports/dependency-check
      
    - name: Download and Run OWASP Dependency Check
      run: |
        echo "🔍 Running OWASP Dependency Check..."
        wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
        unzip -q dependency-check-9.0.9-release.zip
        ./dependency-check/bin/dependency-check.sh \
          --project "flask-auth-api" \
          --scan "." \
          --out "reports/dependency-check" \
          --format "HTML" \
          --format "JSON" \
          --format "CSV" \
          --enableRetired
        echo "✅ OWASP Dependency Check completed"
      continue-on-error: true

    - name: Upload Dependency Check Reports Artifact
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-reports
        path: reports/dependency-check/
        retention-days: 30
        if-no-files-found: warn

  build-summary:
    name: Build Summary & Reports
    runs-on: ubuntu-latest
    needs: [security-scan, docker-security, dependency-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts
      
    - name: Generate Comprehensive Build Report
      run: |
        echo "📈 Generating comprehensive build report..."
        python scripts/generate_comprehensive_report.py
        echo "✅ Comprehensive report generated"
      continue-on-error: true
      
    - name: Create Final Summary
      run: |
        echo "🎯 FINAL BUILD SUMMARY"
        echo "======================"
        echo ""
        echo "📊 Security Scan Results:"
        echo "  ✅ Bandit SAST: $(find all-artifacts -name '*bandit*' | head -1 | xargs -I {} echo 'Reports available')"
        echo "  ✅ Safety Check: $(find all-artifacts -name '*safety*' | head -1 | xargs -I {} echo 'Reports available')"
        echo "  ✅ pip-audit: $(find all-artifacts -name '*pip-audit*' | head -1 | xargs -I {} echo 'Reports available')"
        echo "  ✅ Pylint: $(find all-artifacts -name '*pylint*' | head -1 | xargs -I {} echo 'Reports available')"
        echo ""
        echo "🐳 Docker Security:"
        echo "  ✅ Trivy Scan: $(find all-artifacts -name '*trivy*' | head -1 | xargs -I {} echo 'Reports available')"
        echo ""
        echo "📦 Dependency Analysis:"
        echo "  ✅ OWASP Dependency Check: $(find all-artifacts -name '*dependency-check*' | head -1 | xargs -I {} echo 'Reports available')"
        echo ""
        echo "🧪 Testing:"
        echo "  ✅ Security Tests: $(find all-artifacts -name '*test*' | head -1 | xargs -I {} echo 'Reports available')"
        echo ""
        echo "📁 Total Artifacts Generated:"
        find all-artifacts -type f | wc -l | xargs echo "  - Files:"
        echo ""
        echo "🔒 SECURITY STATUS: ALL CHECKS COMPLETED"
        
    - name: Upload Final Combined Reports
      uses: actions/upload-artifact@v4
      with:
        name: final-combined-reports
        path: |
          all-artifacts/
          reports/
        retention-days: 30
        if-no-files-found: warn

    - name: Upload Build Summary HTML
      uses: actions/upload-artifact@v4
      with:
        name: build-summary-html
        path: |
          reports/build-summary.html
          reports/security-summary.html
        retention-days: 30
        if-no-files-found: warn
