name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Еженедельный запуск в воскресенье

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety pylint
        
    - name: SAST - Bandit (Static Application Security Testing)
      run: |
        bandit -r . -f html -o bandit-report.html || true
        bandit -r . -f json -o bandit-report.json || true
      continue-on-error: true
      
    - name: SAST - Safety (Vulnerability Scanner)
      run: |
        safety check --json --output safety-report.json || true
        safety check --full-report || true
      continue-on-error: true
        
    - name: SCA - OWASP Dependency Check
      uses: dependency-check/Dependency-Check@main
      with:
        project: 'flask-auth-api'
        path: '.'
        format: 'HTML'
        args: >
          --scan .
          --out reports/
          --enableRetired
      continue-on-error: true
      
    - name: Code Quality - Pylint
      run: |
        pylint app.py config.py security.py utils.py --output-format=json:pylint-report.json || true
      continue-on-error: true
      
    - name: Run Security Tests
      run: |
        python -m pytest tests/ -v --junitxml=test-results.xml || true
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.html
          bandit-report.json
          safety-report.json
          pylint-report.json
          reports/
        retention-days: 30
        
    - name: Check Critical Vulnerabilities
      run: |
        python scripts/check_vulnerabilities.py

  docker-build:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t flask-auth-api:latest .
        
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'flask-auth-api:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # docker-compose -f docker-compose.staging.yml up -d
